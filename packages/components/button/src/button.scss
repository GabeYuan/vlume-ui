@use 'sass:math';
@use 'sass:map';

@use '../../styles/mixins/mixins.scss' as *;
@use './botton-mix' as *;

@include b(button) {
  @include set-component-css-var('button', $button);

  @each $type in (primary, success, warn, danger, info) {
    @include m($type) {
      @include button-variant($type);
    }
  }

  & {
    @include button-size(
      map.get($button-padding-vertical, 'default') - $button-border-width,
      map.get($button-padding-horizontal, 'default') - $button-border-width,
      map.get($button-font-size, 'default'),
      map.get($button-border-radius, 'default')
    );
  }
}

@include b(button) {
  border-width: getCssVar('border-width');
  border-style: getCssVar('border-style');
  border-color: getCssVar('button', 'border-color');
  color: getCssVar('button', 'text-color');
  background: getCssVar('button', 'bg-color');
  & + & {
    margin-left: 12px;
  }

  @include when(border) {
    $button-border-width: 2px;
    border-width: $button-border-width;

    & {
      @include button-size(
        map.get($button-padding-vertical, 'default') - $button-border-width,
        map.get($button-padding-horizontal, 'default') - $button-border-width,
        map.get($button-font-size, 'default'),
        map.get($button-border-radius, 'default')
      );
    }
  }

  @include when(link) {
    border-color: transparent;
    color: getCssVar('button', 'text-color');
    background: transparent;
    padding: 2px;
    height: auto;

    &:hover {
      color: getCssVar('button', 'hover', 'link-text-color');
    }

    @include when(disabled) {
      color: getCssVar('button', 'disabled', 'link-text-color');
      background-color: transparent !important;
      border-color: transparent !important;
    }

    &:not(.is-disabled) {
      &:hover {
        border-color: transparent;
        background-color: transparent;
      }

      &:active {
        color: getCssVar('button', 'active-color');
        border-color: transparent;
        background-color: transparent;
      }
    }
  }

  @include when(circle) {
    border-radius: getCssVar('border-radius', 'round');
  }

  @include when(square) {
    border-radius: 0;
  }

  @each $type in (primary, success) {
    @include m($type) {
      @include when(gradient) {
        &::before {
          filter: hue-rotate(40deg) !important;
        }
      }
    }
  }
  @include when(gradient) {
    position: relative;
    background: getCssVar('button', 'bg-color');
    overflow: hidden;
    border: none;
    &::before {
      content: '';
      position: absolute;
      top: 0px;
      left: 0px;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        30deg,
        rgba(0, 0, 0, 0) 33%,
        getCssVar('button', 'bg-color') 90%
      );
      filter: hue-rotate(-40deg);
      pointer-events: none;
    }
    @include e(text) {
      position: relative;
      z-index: 1;
    }
  }

  @each $size in (xl, large, small, mini) {
    @include m($size) {
      & {
        @include button-size(
          map.get($button-padding-vertical, $size) - $button-border-width,
          map.get($button-padding-horizontal, $size) - $button-border-width,
          map.get($button-font-size, $size),
          map.get($button-border-radius, $size)
        );
      }
    }
  }

  &:hover {
    background: getCssVar('button', 'hover', 'bg-color');
    color: getCssVar('button', 'hover', 'text-color');
    border-color: getCssVar('button', 'hover', 'border-color');
    // box-shadow: 0 10px 20px -10px getCssVar('button', 'hover', 'bg-color');
    // transform: translateY(-3px);
    // transition: all 0.3s ease;
  }

  &:active {
    color: getCssVar('button', 'active', 'text-color');
    border-color: getCssVar('button', 'active', 'border-color');
    background-color: getCssVar('button', 'active', 'bg-color');
    &::before {
      display: none;
    }
  }

  // 放在最后，避免样式覆盖
  @include when(disabled) {
    &,
    &:hover {
      cursor: not-allowed;
      color: getCssVar('button', 'disabled', 'text-color');
      background-image: none;
      background-color: getCssVar('button', 'disabled', 'bg-color');
      border-color: getCssVar('button', 'disabled', 'border-color');
      @include when(gradient) {
        opacity: 0.55;
        &::before {
          display: block;
        }
      }
    }
  }
}
